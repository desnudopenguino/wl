#!/usr/bin/env sh
# Time Tracker is a set of functions that can be implemented in ksh to keep
# track of time spent working on a project.

# create a new log file
function newLog {
  session=$(tmux list-pane -F '#S' | head -1)
  date=$(date +"%y_%m_%d")
  filename=~/"work_logs/$session-$date.csv"
  touch $filename
  echo "$filename created..."
  set -A files $(ls $1)
  curFile=${files[0]}
  curURI="`pwd`/$curFile"
  if [[ -e $1 && "$curURI" != "$filename" ]]; then
    echo "Joining $1 to $filename"
    joinLog $session-$date $1
    rm $1
    echo "$1 joined and removed"
  fi
}

# start the current work time with the date and start time
function startLog {
out=$(date +"%m/%d/%y")
start=`calculateQuarter`
out="$out\t$start\t"
session=$(tmux list-pane -F '#S' | head -1)
date=$(date +"%y_%m_%d")
filename=~/"work_logs/$session-$date.csv"
printf "$out" >> $filename
echo "Start time: $start"
}

# append the end time, time worked, and comments to the current work line
function stopLog {
  date=$(date +"%y_%m_%d")
  end=`calculateQuarter`
  session=$(tmux list-pane -F '#S' | head -1)
  filename=~/"work_logs/$session-$date.csv"
  echo "End time: $end"
  start=`getStart`
  time_worked=`calculateDuration $start $end`
  echo "Time Worked: $time_worked"
  if [[ $# -eq 1 ]]; then
    message=$1
    out="$end\t$time_worked\t$message\n"
    echo "Comment: $message"
  else
    out="$end\t$time_worked\n"
  fi
  printf "$out" >> $filename
}

# create the pdf
function generatePDF {
    cd ~/"work_logs/.tex"
    session=$(tmux list-pane -F '#S' | head -1)
    tex_date=$(date +"%y-%m-%d")
    wl_date=$(date +"%y_%m_%d")
    wl_file=~/"work_logs/$session-$wl_date.csv"
    tex_file=~/"work_logs/invoices/$session-$tex_date.tex"
    dates=""
    cat ~/"work_logs/.tex/$session-start.tex" > $tex_file
    while read date start end duration comments
    do
        if [[ "$dates" == "${dates%"$date"*}" ]]
        then
            dates="$dates $date"
        fi
    done < "$wl_file"
    for a in $dates
    do
        wl_line=$(wl -d $a)
        typeset -i min calc_min multiplier
        multiplier=100
        hr=$(echo $wl_line | cut -d ' ' -f2 | cut -d ':' -f1)
        min=$(echo $wl_line | cut -d ' ' -f2 | cut -d ':' -f2)
        calc_min=min*100/60
        calc_time="$hr.$calc_min"
        echo "\hourrow{$(echo $wl_line | cut -d ':' -f1)}{$(echo $calc_time)}" >> $tex_file
    done
    cat ~/"work_logs/.tex/middle.tex" >> $tex_file
    while read date start end duration comments
    do
        echo "$date & $start & $end & $duration & $comments"'\\\\' >> $tex_file
        echo "\hline" >> $tex_file
    done < "$wl_file"
    cat ~/"work_logs/.tex/end.tex" >> $tex_file
    texi2pdf $tex_file --pdf -o ~/"work_logs/invoices/$session-$tex_date.pdf"
}

# calculate the quarter for time (currently 15 mins, can be changed though
function calculateQuarter {
  typeset -i hr min qtr rmnd calc_min calc_hr minimum middle
  minimum=15
  middle=$minimum/2
  OIFS=$IFS
  IFS=':'
  set -A arr $(date +"%H:%M")
  IFS=$OIFS
  hr_start=`echo ${arr[0]} | cut -c1`
  if [[ $hr_start == 0 ]]; then
    hr_new=${arr[0]}
    hr=${hr_new#?}
  else
    hr=${arr[0]}
  fi
  min_start=`echo ${arr[1]} | cut -c1`
  if [[ $min_start == '0' ]]; then
    min_new=${arr[1]}
    min=${min_new#?}
    typeset +i min
    min="00"
  else
    min=${arr[1]}
  fi

  qtr=$min/$minimum
  rmnd=$min%$minimum
  if [[ $rmnd -gt $middle ]]; then
    qtr=$qtr+1
  fi
  calc_min=$qtr*$minimum
  calc_hr=$hr
  if [[ $qtr -eq 0 ]]; then
    typeset -L calc_min
    typeset +i calc_min
    calc_min="00"
  elif [[ $calc_min -eq 60 ]]; then
    typeset -L calc_min
    typeset +i calc_min
    calc_min="00"
    calc_hr=$hr+1
  fi
  endTime="$calc_hr:$calc_min"
  printf $endTime
}

# Get the start time from the file
function getStart {
  session=$(tmux list-pane -F '#S' | head -1)
  date=$(date +"%y_%m_%d")
  filename=~/"work_logs/$session-$date.csv"
  line=$(tail -n 1 $filename)
  set -A arr $line
  start_time=${arr[1]}
  printf $start_time
}

function getTime {
  typeset -i comment_length row
  colWidth=`stty -a | grep 'columns' | awk -F ';' '{print $3}' | awk '{print $1}'`
  typeset -i curWidth printWidth
  curWidth=$colWidth-43
  if [[ -e $1 ]]; then
    file=$1
  else
    session=$(tmux list-pane -F '#S' | head -1)
    date=$(date +"%y_%m_%d")
    file=~/"work_logs/$session-$date.csv"
  fi

  row=1

  echo "\033[1;1m  #:  Date:      Start:  End:    Dur:   Comments:"
  while read date start end duration comments
  do
    comment_length=${#comments}
    if [[ ${#comments} -gt $curWidth ]]; then
      comments=$(echo $comments | awk -v var="$curWidth" '{printf substr($0,1,var)}')"..."
    fi
    printWidth=$curWidth+3
    printf "\033[1;35m%3s\033[1;34m%11s\033[1;33m%8s%8s\033[1;31m%7s" $row $date $start $end $duration
    echo "   \033[1;m$comments"
    row=$row+1
  done < "$file"
  total_duration=`fullLog $1`
  #echo "\t\t\t \033[1;31mTotal:"
  #printf "%6s\033[1;m" $total_duration
  echo ""
  printf "\t\t\t \033[1;32mTotal:%6s\033[1;m\n" $total_duration
  echo ""
}

# calculate the duration between two HH:MM times
function calculateDuration {
  typeset -i start_secs end_secs duration_secs duration_mins duration_hrs

  start_secs=`calculateSeconds $1`

  end_secs=`calculateSeconds $2`

  duration_secs=$end_secs-$start_secs
  duration_hrs=$duration_secs/3600
  duration_mins=$duration_secs%3600/60

  if [[ $duration_mins -eq 0 ]]; then
    typeset -Z2 duration_mins
    duration_mins="00"
  fi

  duration="$duration_hrs:$duration_mins"
  printf $duration
}

# calculane the number of seconds in an HH:MM time
function calculateSeconds {
  typeset -i hr_mins mins secs
  OIFS=$IFS
  IFS=':'
  set -A new_time $1
  IFS=$OIFS
  hr_start=`echo ${new_time[0]} | cut -c1`
  if [[ $hr_start == 0 ]]; then
    hr_new=${arr[0]}
    hr_mins=${hr_new#?}
  else
    hr_mins=${new_time[0]}
  fi
  hr_mins=$hr_mins*60
  min_start=`echo ${new_time[1]} | cut -c1`
  if [[ $min_start == 0 ]]; then
    min_new=${new_time[1]}
    mins=${min_new#?}
  else
    mins=${new_time[1]}
  fi
  mins=$mins+$hr_mins
  secs=$mins*60
  printf $secs
}

# gets the current amount of time worked
function currentLog {
  start=`getStart`
  now=`date +"%H:%M"`
  date=$(date +"%m/%d/%y")
  if [[ "$now" == 0* ]]; then
    now=${now#?}
  fi
  duration=`calculateDuration $start $now`
  printf "\tDate:\t\tStart:\tNow:\tDur:\n\t$date\t$start\t$now\t$duration\n"
}

# get the total hours for this cur
function fullLog {
  if [[ -e $1 ]]; then
    file=$1
  else
    session=$(tmux list-pane -F '#S' | head -1)
    date=$(date +"%y_%m_%d")
    file=~/"work_logs/$session-$date.csv"
  fi
  typeset -i hrs mins calc_hrs calc_mins
  hrs=0
  mins=0
  while read date start end duration comments
  do
    OIFS=$IFS
    IFS=':'
    set -A new_time $duration
    IFS=$OIFS
    hrs=$hrs+${new_time[0]}
    mins=$mins+${new_time[1]}
  done < "$file"
  calc_hrs=$mins/60
  calc_mins=$mins%60
  hrs=$hrs+$calc_hrs
  mins=$calc_mins

  printf "$hrs:$mins"
}

# show totals for a day
function dayLog {
  if [[ -z $1 ]]; then
    cur_date=$(date +"%m/%d/%y")
  else
    cur_date=$1
  fi

  if [[ -e $2 ]]; then
    file=$2
  else
    session=$(tmux list-pane -F '#S' | head -1)
    file_date=$(date +"%y_%m_%d")
    file=~/"work_logs/$session-$file_date.csv"
  fi
  typeset -i hrs mins calc_hrs calc_mins
  hrs=0
  mins=0
  while read date start end duration comments
  do
    if [[ $date == $cur_date ]]; then
  OIFS=$IFS
  IFS=':'
  set -A new_time $duration
  IFS=$OIFS
  hrs=$hrs+${new_time[0]}
  mins=$mins+${new_time[1]}
  fi
  done < "$file"
  calc_hrs=$mins/60
  calc_mins=$mins%60
  hrs=$hrs+$calc_hrs
  mins=$calc_mins

  printf "$cur_date: $hrs:$mins"
}

# combine another log to this one
function joinLog {
  if [[ -z "$1" ]]; then
    echo "Please enter both files"
  else
    out_file=~/"work_logs/$1.csv"
  fi

  if [[ -z "$2" ]]; then
    echo "Please enter the file to be added"
  else
    in_file=$2
  fi
  if [[ -e $out_file ]]; then
    echo "$out_file exists."
  else
    touch $out_file
  fi
  if [[ -e $in_file ]]; then
    cat $in_file >> $out_file
  else
    echo "$in_file doesn't exist"
  fi
}

# Get full commments for specific time block
function getItem {
  if [[ -z $1 ]]; then
    echo "Choose an entry number, dangus!"
  else
    session=$(tmux list-pane -F '#S' | head -1)
    date=$(date +"%y_%m_%d")
    filename=~/"work_logs/$session-$date.csv"
    sed -n $1p $filename
  fi
}

# WRAPPER HERE
# This part isn't a function, but will execute as one (hopefully) as the shell script is executed.

# check if file structure is set up
if [[ ! -d "/home/`whoami`/work_logs/.archive" ]]; then
  mkdir -p ~/work_logs/.archive
fi
# if no arguments print out the current log's time, if that log exists
if [[ ${#} -eq 0 ]]; then
  getTime
else
  args_1=$1
  start=`echo $args_1 | cut -c1`

  # make sure flags are marked by a '-'
  if [[ $start == '-' ]]; then
    #continue
    args_1=${args_1#?}
    continue=true

    # iterate through flags
    while [[ $continue == true ]]
    do
      arg=`echo $args_1 | cut -c1`
      args_1=${args_1#?}
      #echo $arg
      if [[ -z $args_1 ]]; then
        continue=false
      fi
      #separate flag logic

      # new log
      if [[ $arg == 'N' ]]; then
        newLog $2
      fi

      # Time for other log file
      if [[ $arg == 't' ]]; then
        getTime $2
      fi

      # start the log
      if [[ $arg == 's' ]]; then
        startLog
      fi

      # stop the log
      if [[ $arg == 'f' ]]; then
        #echo $2
        stopLog "$2"
      fi

      # get current work block time
      if [[ $arg == 'c' ]]; then
        currentLog
      fi

      # get extended comments for an entry (i)tem
      if [[ $arg == 'i' ]]; then
        getItem $2
      fi

      # get the date stuff
      if [[ $arg == 'd' ]]; then
        echo `dayLog $2 $3` "Hours\n"
      fi

      # edit it!
      if [[ $arg == 'v' ]]; then
        session=$(tmux list-pane -F '#S' | head -1)
        date=$(date +"%y_%m_%d")
        filename=~/"work_logs/$session-$date.csv"
        tail -n 1 $filename | grep '\n'
        exit_val=$?
        if [[ $exit_val == 0 ]]; then
          vim +'set noexpandtab' $filename
        else
          vim +'set noendofline' +'set binary' +'set noexpandtab' $filename
        fi
      fi

      # setup (r)emote directory structure
      if [[ $arg == 'r' ]]; then
        dir="work_logs"
        wl_box_setup.expect $dir
      fi

      # (g)et from Box
      if [[ $arg == 'g' ]]; then
        echo "Get from Box"
        if [[ $# -lt 2 ]]; then
          session=$(tmux list-pane -F '#S' | head -1)
          date=$(date +"%y_%m_%d")
          filename="$session-$date.csv"
        else
          filename=$2
        fi
        dir="work_logs"
        localdir="/home/`whoami`/$dir"
        wl_box_get.expect $filename $localdir $dir
        echo "\n"
      fi

      # (p)ush to Box
      if [[ $arg == 'p' ]]; then
        session=$(tmux list-pane -F '#S' | head -1)
        date=$(date +"%y_%m_%d")
        filename="$session-$date.csv"
        dir="work_logs"
        localdir="/home/`whoami`/$dir"
        wl_box_put.expect $filename $localdir $dir
        echo "\n"
      fi

      # (o)utput to pdf
      if [[ $arg == 'o' ]]; then
        generatePDF
      fi

      # (a)rchive - add files to work_logs/.archive directory
      if [[ $arg == 'a' ]]; then
        session=$(tmux list-pane -F '#S' | head -1)
        date=$(date +"%y_%m_%d")
        filename="$session-$date.csv"
        echo "Archiving $filename..."
        dir="work_logs"
        localdir="/home/`whoami`/$dir"
        current=~/"$dir/$filename"
        archive=~/"$dir/.archive/"
        wl_box_put.expect $filename $localdir $dir/.archive
        mv $current $archive
        echo "Cleaning up other $session logs..."
        rm -i /$localdir/$session*
        wl_box_delete.expect $session $dir/
        echo "\n"
      fi
    done
  else
    echo "First Argument must be a '-' followed by one or more flags"
  fi
fi
